"""\nMódulo principal da aplicação\n"""\nimport os\nimport sys\nimport logging\nimport tkinter as tk\nfrom datetime import datetime\nfrom typing import Dict, Any, List, Optional\n\nfrom app.config.config import carregar_configuracoes, APP_CONFIG, WEBSERVICE_CONFIG, XML_CONFIG\nfrom app.services.database import DatabaseService\nfrom app.services.xml_generator import gerar_xml_lote_rps, validar_xml_lote_rps, criar_diretorio_xml_se_nao_existir\nfrom app.services.webservice_client import WebServiceClient\nfrom app.views.main_window import MainWindow\n\n# Configurar logging\ndef configurar_logging():\n    """\n    Configura o sistema de logging da aplicação\n    """\n    try:\n        # Criar diretório de logs se não existir\n        diretorio_logs = APP_CONFIG.get('diretorio_logs', 'logs')\n        if not os.path.exists(diretorio_logs):\n            os.makedirs(diretorio_logs)\n            \n        # Nome do arquivo de log baseado na data\n        data_atual = datetime.now().strftime("%Y%m%d")\n        arquivo_log = os.path.join(diretorio_logs, f"nfse_{data_atual}.log")\n        \n        # Configurar formato do log\n        formato = logging.Formatter(\n            '%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n            datefmt='%Y-%m-%d %H:%M:%S'\n        )\n        \n        # Handler para arquivo\n        file_handler = logging.FileHandler(arquivo_log, encoding='utf-8')\n        file_handler.setFormatter(formato)\n        \n        # Handler para console\n        console_handler = logging.StreamHandler()\n        console_handler.setFormatter(formato)\n        \n        # Configurar logger root\n        logger = logging.getLogger()\n        logger.setLevel(logging.INFO)\n        logger.addHandler(file_handler)\n        logger.addHandler(console_handler)\n        \n        return logger\n        \n    except Exception as e:\n        print(f"Erro ao configurar logging: {str(e)}")\n        sys.exit(1)\n\ndef processar_notas_pendentes(db_service: DatabaseService, ws_client: WebServiceClient) -> None:\n    """\n    Processa as notas pendentes de envio\n    \n    Args:\n        db_service: Serviço de banco de dados\n        ws_client: Cliente do web service\n    """\n    try:\n        logger = logging.getLogger(__name__)\n        logger.info("Iniciando processamento de notas pendentes...")\n        \n        # Estabelecer conexão com o banco de dados\n        logger.info("Estabelecendo conexão com o banco de dados...")\n        db_service.conectar()\n        \n        # Buscar notas pendentes\n        notas = db_service.buscar_notas_pendentes()\n        if not notas:\n            logger.info("Nenhuma nota pendente encontrada")\n            return\n            \n        logger.info(f"Encontradas {len(notas)} notas pendentes")\n        \n        # Buscar itens de cada nota\n        itens_por_nota = {}\n        for nota in notas:\n            itens = db_service.buscar_itens_nota(nota['IDMOV'])\n            if not itens:\n                logger.warning(f"Nota {nota['NUMEROMOV']} não possui itens")\n                continue\n            itens_por_nota[nota['IDMOV']] = itens\n        \n        # Criar diretório para XMLs se não existir\n        criar_diretorio_xml_se_nao_existir()\n        \n        # Gerar XML do lote\n        caminho_xml = gerar_xml_lote_rps(notas, itens_por_nota)\n        \n        # Validar XML\n        sucesso, mensagem = validar_xml_lote_rps(caminho_xml)\n        if not sucesso:\n            logger.error(f"XML inválido: {mensagem}")\n            return\n            \n        logger.info("XML validado com sucesso")\n        \n        # Enviar lote\n        sucesso, resposta = ws_client.enviar_lote_rps(caminho_xml)\n        if not sucesso:\n            logger.error(f"Falha ao enviar lote: {resposta.get('mensagem', 'Erro desconhecido')}")\n            return\n            \n        protocolo = resposta.get('protocolo', '')\n        logger.info(f"Lote enviado com sucesso. Protocolo: {protocolo}")\n        \n        # Atualizar status das notas\n        for nota in notas:\n            db_service.atualizar_status_nota(nota['IDMOV'], protocolo)\n            \n        logger.info("Status das notas atualizado com sucesso")\n        \n    except Exception as e:\n        logger.error(f"Erro ao processar notas pendentes: {str(e)}")\n        raise\n    finally:\n        # Fechar conexão com o banco de dados\n        try:\n            db_service.desconectar()\n        except:\n            pass\n\ndef verificar_estrutura_diretorios():\n    """\n    Verifica e cria a estrutura de diretórios necessária para a aplicação\n    """\n    logger = logging.getLogger(__name__)\n    \n    # Verificar diretório de XMLs\n    diretorio_xml = APP_CONFIG.get('diretorio_xml', 'xml/')\n    if not os.path.exists(diretorio_xml):\n        logger.info(f"Criando diretório para XMLs: {diretorio_xml}")\n        os.makedirs(diretorio_xml, exist_ok=True)\n    \n    # Verificar diretório de logs\n    diretorio_logs = APP_CONFIG.get('diretorio_logs', 'logs/')\n    if not os.path.exists(diretorio_logs):\n        logger.info(f"Criando diretório para logs: {diretorio_logs}")\n        os.makedirs(diretorio_logs, exist_ok=True)\n    \n    # Verificar diretório de XSDs\n    diretorio_xsd = APP_CONFIG.get('diretorio_xsd', 'xsdExemplos/')\n    if not os.path.exists(diretorio_xsd):\n        logger.info(f"Diretório de XSDs não encontrado: {diretorio_xsd}")\n        \n        # Verificar se existe o diretório xsdExemplos na raiz\n        if os.path.exists('xsdExemplos'):\n            logger.info("Diretório xsdExemplos encontrado na raiz, atualizando configuração")\n            APP_CONFIG['diretorio_xsd'] = 'xsdExemplos/'\n        else:\n            logger.warning("Diretório de XSDs não encontrado. A validação de XML pode falhar.")\n    \n    # Verificar se há exemplos de XML\n    diretorio_exemplos = 'xmlexemplos'\n    if os.path.exists(diretorio_exemplos):\n        logger.info(f"Diretório de exemplos XML encontrado: {diretorio_exemplos}")\n        \n    return True\n\ndef iniciar_interface_grafica():\n    """\n    Inicia a interface gráfica da aplicação\n    """\n    logger = logging.getLogger(__name__)\n    \n    try:\n        # Criar a janela principal\n        root = tk.Tk()\n        root.title(APP_CONFIG.get('titulo', 'Sistema de Emissão de NFS-e'))\n        \n        # Definir o tamanho inicial da janela (largura x altura)\n        largura, altura = 900, 700\n        root.geometry(f"{largura}x{altura}")\n        \n        # Criar a interface principal\n        app = MainWindow(root)\n        \n        # Iniciar o loop principal\n        logger.info("Iniciando interface gráfica")\n        root.mainloop()\n        \n    except Exception as e:\n        logger.error(f"Erro ao inicializar interface gráfica: {str(e)}")\n        raise\n\ndef main():\n    """\n    Função principal da aplicação\n    """\n    try:\n        # Configurar logging\n        logger = configurar_logging()\n        logger.info("Iniciando aplicação...")\n        \n        # Carregar configurações\n        logger.info("Carregando configurações...")\n        carregar_configuracoes()\n        \n        # Verificar estrutura de diretórios\n        verificar_estrutura_diretorios()\n        \n        # Verificar se é possível encontrar o certificado digital\n        if WEBSERVICE_CONFIG['certificado'] and not os.path.exists(WEBSERVICE_CONFIG['certificado']):\n            logger.warning(\n                f"Certificado digital não encontrado: {WEBSERVICE_CONFIG['certificado']}. "\n                f"Ativando automaticamente o modo de simulação."\n            )\n            WEBSERVICE_CONFIG['modo_simulacao'] = True\n        elif not WEBSERVICE_CONFIG['certificado']:\n            logger.warning("Nenhum certificado digital configurado. Ativando modo de simulação.")\n            WEBSERVICE_CONFIG['modo_simulacao'] = True\n            \n        # Verificar modo da aplicação\n        if WEBSERVICE_CONFIG['modo_simulacao']:\n            logger.info("Aplicação em MODO DE SIMULAÇÃO. Nenhuma nota será enviada ao servidor real.")\n        elif WEBSERVICE_CONFIG['modo_homologacao']:\n            logger.info("Aplicação em MODO DE HOMOLOGAÇÃO. As notas serão enviadas ao servidor de testes.")\n        else:\n            logger.info("Aplicação em MODO DE PRODUÇÃO. As notas serão enviadas ao servidor oficial.")\n            \n        # Iniciar interface gráfica\n        iniciar_interface_grafica()\n        \n    except Exception as e:\n        if 'logger' in locals():\n            logger.error(f"Erro fatal na aplicação: {str(e)}")\n        else:\n            print(f"Erro fatal na aplicação: {str(e)}")\n        sys.exit(1)\n\nif __name__ == "__main__":\n    main()